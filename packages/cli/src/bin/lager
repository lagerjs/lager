#!/usr/bin/env node
'use strict';

const icli = require('comquirer');

if (['dev', 'development', 'debug'].indexOf(process.env.NODE_ENV) > -1) {
  process.on('uncaughtException', (e) => {
    process.stderr.write('\n  Uncaught Exception\n\n');
    process.stderr.write(e.stack + '\n');
    process.exit(1);
  });

  process.on('unhandledRejection', (reason, promise) => {
    process.stderr.write('\n  Unhandled Rejection\n\n');
    process.stderr.write('Promise: ' + JSON.stringify(promise, null, 2) + '\n\n');
    process.stderr.write('Reason: ' + (reason instanceof Error ? reason.stack : JSON.stringify(reason, null, 2)) + '\n');
    process.exit(1);
  });
}

/**
 * Initialisation fush the require cache and try to load a lager project
 * @return {Promise}
 */
icli.init = function init() {
  // Useful to reinit the cli for integration tests
  Object.keys(require.cache).forEach(function(key) { delete require.cache[key]; });
  icli.reset();
  icli.getProgram().commandHelp = require('../commander-help-override');

  // Add base commands
  require('../cli/disable-default')(icli);
  require('../cli/please')(icli);

  // Check if the user calls the command from a lager project
  return require('../load-lager-project')(icli)
  .then(lager => {
    if (lager) {
      // If a Lager instance is found, we add the "show-config" command
      require('../cli/show-config')(icli, lager);
      // Inject lager in the cli, it will be used by integration tests to retrieve the configuration
      icli.lager = lager;
    } else {
      // If no Lager instance is found, we add the "new" command
      require('../cli/new')(icli);
    }
    return Promise.resolve(icli);
  });
};

/**
 * The default print() simply wraps console.log()
 * @return {void}
 */
const print = function print(v) {
  console.log(v);
};
icli.print = print;

let catched = '';

/**
 * Start to catch the content that is sent to icli.print()
 * @param  {Boolean} execOriginal - if set to true, the original print() function will be executed too
 * @return {void}
 */
icli.catchPrintStart = function printBufferStart(execOriginal) {
  catched = '';
  icli.print = function(v) {
    if (execOriginal) { print.apply(null, arguments); }
    catched += v;
  };
};

/**
 * Stop to catch the content that is sent to icli.print() and returns it
 * @return {String}
 */
icli.catchPrintStop = () => {
  icli.print = print;
  return catched;
};

module.exports = icli;

/**
 * If the current file is the main one, we call icli.init() and parse the command line
 */
if (require.main === module) {
  // If the module is called directly, we parse the command line
  icli.init().then(icli => {
    if (!process.argv.slice(2).length) {
      // If no arguments where provided, we call the help option
      icli.getProgram().outputHelp();
    } else {
      icli.parse(process.argv);
    }
  });
}
